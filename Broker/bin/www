#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Broker:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var socketio = require('socket.io');
var server = http.createServer(app);
var io = socketio.listen(server);     // global

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

console.log('Broker --->', port);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var publications = [];
var subscriptions = [];

var socket = function (socket) {
  console.log('Connection...');
  var
    _emitEvent = function (item, matchItem, prop) {
      var
        eventData = {},
        eventString;

      eventString = item.company || '' + item[prop].symbol + item[prop].value;

      console.log('EMIT', eventString, prop);

      eventData.pub = matchItem;
      eventData.sub = item;

      socket.emit(eventString, eventData);
      socket.broadcast.emit(eventString, eventData);
    },
    _matchEqual = function ( item, colections, prop ) {
      var 
        i,
        len = colections.length;

      for ( i = 0; i < len; i += 1 ) {
        if (  item[prop].value === colections[i][prop].value ) {
          _emitEvent ( item, colections[i], prop );
        }
      } 
    },
    _matchGreaterEqual = function ( item, colections, prop ) {
      var
        i,
        len = colections.length;

      for ( i = 0; i < len; i += 1 ) {
        if (  colections[i][prop].value >=  item[prop].value ) {
          _emitEvent ( item, colections[i], prop );
        }
      }
    },
    _matchLessEqual = function ( item, colections, prop ) {
      var
        i,
        len = colections.length;

      for ( i = 0; i < len; i += 1 ) {
        if (  colections[i][prop].value <=  item[prop].value ) {
          _emitEvent ( item, colections[i], prop );
        }
      }
    },
    _matchGreater = function ( item, colections, prop ) {
      var
        i,
        len = colections.length;


      for ( i = 0; i < len; i += 1 ) {
        if (  colections[i][prop].value > item[prop].value ) {
          _emitEvent ( item, colections[i], prop );
        }
      }
    },
    _matchLess = function ( item, colections, prop ) {
      var
        i,
        len = colections.length;

      for ( i = 0; i < len; i += 1 ) {
        if (  colections[i][prop].value < item[prop].value  ) {
          _emitEvent ( item, colections[i], prop );
        }
      }
    },
    _verifyMatch = function ( item, colections, prop) {
      var symbol = item[prop].symbol;


      switch (symbol) {
        case '=' : {
          _matchEqual ( item, colections, prop );
          break;
        }
        case '>=' : {
          _matchGreaterEqual ( item, colections, prop );
          break;
        }
         case '<=' : {
           _matchLessEqual ( item, colections, prop );
          break;
        }
        case '>' : {
          _matchGreater ( item, colections, prop );
          break;
        }
        case '<' : {
          _matchLess ( item, colections, prop );
          break;
        }

      }
    },
    _verifyMatchPubSub = function (pub ,sub, prop) {
      var sb = sub[prop].symbol;

      switch (sb) {
        case '<' : {
          if ( pub[prop].value < sub[prop].value ) {
            _emitEvent(sub,pub,prop);
          }
          break;
        }
        case '>' : {
          if ( pub[prop].value > sub[prop].value ) {
            _emitEvent(sub, pub, prop);
          }
          break;
        }
        case '=' : {
          if ( pub[prop].value === sub[prop].value ) {
            _emitEvent(sub,pub,prop);
          }
          break;
        }
        case '>=' : {
          if ( pub[prop].value >= sub[prop].value ) {
            _emitEvent(sub,pub,prop);
          }
          break;
        }
        case '<=' : {
          if ( pub[prop].value <= sub[prop].value ) {
            _emitEvent(sub,pub,prop);
          }
          break;
        }
      }

    },
    _verifyMatchNewPub = function (pub, subscriptions) {
      var
        i,
        sub,
        len = subscriptions.length;

      for ( i = 0; i < len; i +=1 ) {
        sub =  subscriptions[i];
        if ( sub.company ) { //have company prop and is equls to pub company property
           if ( sub.company === pub.company ) {
             if ( sub.value ) {
               _verifyMatchPubSub(pub, sub, 'value' );
             }
             if ( sub.variation ) {
               _verifyMatchPubSub(pub, sub, 'variation' );
             }
           }
        } else {
          if ( sub.value ) {
            _verifyMatchPubSub(pub, sub, 'value' );
          }
          if ( sub.variation ) {
            _verifyMatchPubSub(pub, sub, 'variation' );
          }
        }
      }
    },
    _verifyMatchOnCompany = function (item, colections) {
      if ( item.value ) {
        _verifyMatch( item, colections, 'value' );
      }
      if ( item.variation ) {
         _verifyMatch( item, colections, 'variation' );
      }
    },
    _checkMatchPub = function (sub) {
      var
        matchPubOnCompany = [],
        i,j,
        len = publications.length;


      if ( sub.company ) {
        for ( i = 0; i < len ; i += 1 ) {
          if ( sub.company === publications[i].company ) {
            matchPubOnCompany.push(publications[i]);
          }
        }
        _verifyMatchOnCompany ( sub, matchPubOnCompany );
      } else {
        console.log('n-am companie');
        _verifyMatchOnCompany ( sub, publications );
      }

    },
    _checkMatchSub = function (pub) {
      _verifyMatchNewPub ( pub, subscriptions );
    };

  socket.on('new_publication', function (pub) {
    console.log('New_pub', pub.company);

    publications.push(pub);
    _checkMatchSub(pub);
  });

  socket.on('new_subscription', function (sub) {
    console.log('New_sub', sub.company);

    subscriptions.push(sub);
    _checkMatchPub(sub);
  });
};

io.sockets.on('connection', socket);

